<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.milkms.db.dao.DistributorMapper">
	<resultMap id="baseResultMap" type="com.cy.milkms.db.entity.Distributor">
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="name" property="name"  jdbcType="VARCHAR"/>
		<result column="address" property="address"  jdbcType="VARCHAR"/>
		<result column="people" property="people"  jdbcType="VARCHAR"/>
		<result column="phone" property="phone"  jdbcType="VARCHAR"/>
		<result column="total_price" property="total_price"  jdbcType="DOUBLE"/>
		<result column="unpaid_price" property="unpaid_price"  jdbcType="DOUBLE"/>
		<result column="paid_price" property="paid_price" jdbcType="DOUBLE" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="created" property="created" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
		<result column="updated" property="updated" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp" />
	</resultMap>
	
	<select id="getDistributorByID" resultType="com.cy.milkms.db.entity.Distributor">
		select * from distributor where id=#{distributorID}
	</select>
	
	<select id="getDistributorByCondition" resultMap="baseResultMap">
		select * from distributor
		where
			status = 1
			<if test="distributorInfo != '' and distributorInfo != null">
				and (name like '%${distributorInfo}%' or people like '%${distributorInfo}%')
			</if>
		limit #{pager.start}, #{pager.rows}
	</select>
	
	<select id="getDistributorByConditionCount" resultType="int">
		select count(id) from distributor
		where status = 1
			<if test="distributorInfo != '' and distributorInfo != null">
				and (name like '%${distributorInfo}%' or people like '%${distributorInfo}%')
			</if>
	</select>
	
	<select id="getDistributorByNameCount" resultType="int">
		select count(id) from distributor where name = #{name}
	</select>
	
	<insert id="addDistributor" useGeneratedKeys="true">
		insert into distributor(name, address, people, phone, total_price, paid_price, unpaid_price, status, created, updated)
		values(#{distributor.name}, #{distributor.address}, #{distributor.people}, #{distributor.phone},
		#{distributor.total_price}, #{distributor.paid_price}, #{distributor.unpaid_price}, #{distributor.status}, #{distributor.created}, #{distributor.updated})
	</insert>
	
	<update id="deleteDistributor">
		update distributor set status = 2, updated=#{updated} where id=#{distributorid}
	</update>
		
	<update id="updateDistributor">
		update distributor set address=#{address}, people=#{people}, phone=#{phone}, updated=#{updated} where name=#{name}
	</update>
	
	<update id="updateDistributorprice">
		update distributor set total_price=#{distributor.total_price}, unpaid_price=#{distributor.unpaid_price}, paid_price=#{distributor.paid_price}, updated=#{distributor.updated} where id=#{distributor.id}
	</update>
</mapper>