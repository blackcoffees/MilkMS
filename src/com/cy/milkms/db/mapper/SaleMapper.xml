<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cy.milkms.db.dao.SaleMapper">
	<resultMap id="baseResultMap" type="com.cy.milkms.db.entity.Sale">
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="distributor_id" property="distributor_id" jdbcType="INTEGER"/>
		<result column="receivables_price" property="receivables_price"  jdbcType="DOUBLE"/>
		<result column="paid_price" property="paid_price"  jdbcType="DOUBLE"/>
		<result column="unpaid_price" property="unpaid_price" jdbcType="BOOLEAN"/>
		<result column="sale_time" property="sale_time" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"/>
		<result column="paid_time" property="paid_time" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"/>
		<result column="created" property="created" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"/>
		<result column="updated" property="updated" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"/>
		<result column="status" property="status" jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="saleQuery" type="com.cy.milkms.db.query.SaleQuery" extends="baseResultMap">
		<result column="quantity" property="quantity" jdbcType="INTEGER" />
		<result column="price" property="price" jdbcType="DOUBLE" />
		<result column="total_amount" property="total_amount" jdbcType="DOUBLE" />
		<result column="milk_name" property="milk_name" jdbcType="VARCHAR" />
		<result column="distributor_name" property="distributor_name" jdbcType="VARCHAR" />
	</resultMap>

	<insert id="addSale" useGeneratedKeys="true" keyProperty="sale.id">
		insert into sale(distributor_id, receivables_amount, paid_amount, unpaid_amount, sale_time, paid_time, created, updated, status)
		values(#{sale.distributor_id}, #{sale.receivables_amount}, #{sale.paid_amount}, #{sale.unpaid_amount}, 
		#{sale.sale_time}, #{sale.paid_time}, #{sale.created}, #{sale.updated}, #{sale.status})
	</insert>
	
	<select id="getSaleByCondition" resultMap="saleQuery">
		select
			sale.id, sale.sale_time, sale.paid_time, sale.status, sale.receivables_price, sale.paid_price, sale.unpaid_price,
			detailed.quantity, detailed.price, detailed.total_price as total_amount,
			milk.milk_name, distributor.name as distributor_name
		from 
			milk, sale, sale_detailed as detailed, distributor
		where
			detailed.sale_id = sale.id
			and detailed.milk_id = milk.id
			and sale.distributor_id = distributor.id
			<if test="startTime != null and startTime != ''">
				 and #{startTime} &lt;= sale.created
			</if>
			<if test="endTime != null and endTime != ''">
				and sale.created &lt;= #{endTime}
			</if>
			<choose>
				<when test="saleID != null and saleID != '' and saleID != 0">
					and sale.id=#{saleID}
				</when>
				<otherwise>
					and sale.id in (select t.id from (select * from sale order by id desc limit #{pager.start}, #{pager.rows}) as t)
				</otherwise>
			</choose>
			<if test="status != 0">
				and sale.status = #{status}
			</if>
			<if test="distributorName != null and distributorName != ''">
				and distributor.name like '%${distributorName}%'
			</if>
	</select>
	
	<select id="getSaleByConditionCount" resultType="int">
		select count(id) from sale where 1=1
		<if test="startTime != null and startTime != ''">
			 and #{startTime} &lt;= sale.created
		</if>
		<if test="endTime != null and endTime != ''">
			and sale.created &lt;= #{endTime}
		</if>
		<if test="saleID != null and saleID != '' and saleID != 0">
			and sale.id=#{saleID}
		</if>
	</select>
	
	<update id="updateSaleStatus">
		update sale set status=#{status}, updated=#{updated} where id=#{saleID}
	</update>
	
	<select id="getSaleByID" resultType="com.cy.milkms.db.entity.Sale">
		select * from sale where id=#{saleID}
	</select>
	
	<update id="updateBalanceSale">
		update sale set paid_amount=#{sale.paid_amount}, unpaid_amount=#{sale.unpaid_amount}, status=#{sale.status}, updated=#{sale.updated}, paid_time=#{sale.paid_time} where id=#{sale.id}
	</update>
</mapper>